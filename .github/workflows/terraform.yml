name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  push:
    branches:
      - main

env:
  # verbosity setting for Terraform logs 
  TF_LOG: INFO
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: terraform plan -input=false

      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Init ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validate ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
      - name: Fail if Plan Failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Get Load Balancer URL
        id: get_lb_url
        run: |
          LB_URL=$(terraform output -raw lb_dns_name)
          echo "lb_url=http://$LB_URL" >> $GITHUB_OUTPUT
      - name: Wait for Load Balancer Targets to Become Healthy
        run: |
          TG_ARN=$(terraform output -raw tg_arn)
          for i in {1..12}; do
            STATUS=$(aws elbv2 describe-target-health --target-group-arn $TG_ARN \
              --query "TargetHealthDescriptions[].TargetHealth.State" --output text)
            echo "Current Target Health: $STATUS"
            if [[ "$STATUS" == *"healthy"* ]]; then
              echo "‚úÖ Targets are healthy!"
              exit 0
            fi
            echo "‚è≥ Waiting 10s for targets to become healthy..."
            sleep 10
          done
          echo "‚ùå Targets did not become healthy in time"
          exit 1
      - name: üï∑Ô∏è Run ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: ${{ steps.get_lb_url.outputs.lb_url }}
          rules_file_name: '.zap/rules.tsv'      # optional rules override file
          cmd_options: '-a'

      - name: Upload ZAP Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html
